{"ast":null,"code":"var _jsxFileName = \"/Users/mdelgado/Documents/source/FinTech/scaffold-eth/packages/react-app/src/components/Wallet.jsx\";\nimport React, { useState } from \"react\";\nimport { WalletOutlined, QrcodeOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Tooltip, Spin, Modal, Button } from \"antd\";\nimport QR from \"qrcode.react\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport AddressInput from \"./AddressInput\";\nimport EtherInput from \"./EtherInput\";\nexport default function Wallet(props) {\n  const signerAddress = useUserAddress(props.provider);\n  const selectedAddress = props.address || signerAddress;\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const providerSend = props.provider ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Wallet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(WalletOutlined, {\n    onClick: () => {\n      setOpen(!open);\n    },\n    rotate: -90,\n    style: {\n      padding: 7,\n      color: props.color ? props.color : \"#1890ff\",\n      cursor: \"pointer\",\n      fontSize: 28,\n      verticalAlign: \"middle\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  })) : \"\";\n  let display;\n  let receiveButton;\n\n  if (qr) {\n    display = /*#__PURE__*/React.createElement(QR, {\n      value: selectedAddress,\n      size: \"450\",\n      level: \"H\",\n      includeMargin: true,\n      renderAs: \"svg\",\n      imageSettings: {\n        excavate: false\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    });\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"hide\",\n      onClick: () => {\n        setQr(\"\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), \" Hide\");\n  } else {\n    const inputStyle = {\n      padding: 10\n    };\n    display = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: inputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AddressInput, {\n      autoFocus: true,\n      ensProvider: props.ensProvider,\n      placeholder: \"to address\",\n      value: toAddress,\n      onChange: setToAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: inputStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(EtherInput, {\n      price: props.price,\n      value: amount,\n      onChange: value => {\n        setAmount(value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    })));\n    receiveButton = /*#__PURE__*/React.createElement(Button, {\n      key: \"receive\",\n      onClick: () => {\n        setQr(selectedAddress);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }), \" Receive\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, providerSend, /*#__PURE__*/React.createElement(Modal, {\n    visible: open,\n    title: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, selectedAddress ? /*#__PURE__*/React.createElement(Address, {\n      value: selectedAddress,\n      ensProvider: props.ensProvider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 32\n      }\n    }) : /*#__PURE__*/React.createElement(Spin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 102\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        float: \"right\",\n        paddingRight: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Balance, {\n      address: selectedAddress,\n      provider: props.provider,\n      dollarMultiplier: props.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    }))),\n    onOk: () => {\n      setQr();\n      setOpen(!open);\n    },\n    onCancel: () => {\n      setQr();\n      setOpen(!open);\n    },\n    footer: [receiveButton, /*#__PURE__*/React.createElement(Button, {\n      key: \"submit\",\n      type: \"primary\",\n      disabled: !amount || !toAddress || qr,\n      loading: false,\n      onClick: () => {\n        const tx = Transactor(props.provider);\n        let value;\n\n        try {\n          value = parseEther(\"\" + amount);\n        } catch (e) {\n          // failed to parseEther, try something else\n          value = parseEther(\"\" + parseFloat(amount).toFixed(8));\n        }\n\n        tx({\n          to: toAddress,\n          value\n        });\n        setOpen(!open);\n        setQr();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SendOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }), \" Send\")],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, display));\n}","map":{"version":3,"sources":["/Users/mdelgado/Documents/source/FinTech/scaffold-eth/packages/react-app/src/components/Wallet.jsx"],"names":["React","useState","WalletOutlined","QrcodeOutlined","SendOutlined","Tooltip","Spin","Modal","Button","QR","parseEther","useUserAddress","Transactor","Address","Balance","AddressInput","EtherInput","Wallet","props","signerAddress","provider","selectedAddress","address","open","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","providerSend","padding","color","cursor","fontSize","verticalAlign","display","receiveButton","excavate","inputStyle","ensProvider","price","value","float","paddingRight","tx","e","parseFloat","toFixed","to"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { WalletOutlined, QrcodeOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Tooltip, Spin, Modal, Button } from \"antd\";\nimport QR from \"qrcode.react\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { useUserAddress } from \"eth-hooks\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport AddressInput from \"./AddressInput\";\nimport EtherInput from \"./EtherInput\";\n\nexport default function Wallet(props) {\n  const signerAddress = useUserAddress(props.provider);\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"#1890ff\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  if (qr) {\n    display = (\n      <QR\n        value={selectedAddress}\n        size=\"450\"\n        level=\"H\"\n        includeMargin\n        renderAs=\"svg\"\n        imageSettings={{ excavate: false }}\n      />\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            value={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address value={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setOpen(!open);\n        }}\n        footer={[\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.provider);\n\n              let value;\n              try {\n                value = parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}