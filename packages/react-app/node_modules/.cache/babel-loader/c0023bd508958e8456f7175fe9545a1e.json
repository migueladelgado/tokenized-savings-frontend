{"ast":null,"code":"var _jsxFileName = \"/Users/mdelgado/Documents/source/FinTech/scaffold-eth/packages/react-app/src/components/AddressInput.jsx\";\nimport React, { useState, useCallback } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Input, Badge } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport Blockie from \"./Blockie\";\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n  const scannerButton = /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 4,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setScan(!scan);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    count: /*#__PURE__*/React.createElement(CameraOutlined, {\n      style: {\n        fontSize: 9\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(QrcodeOutlined, {\n    style: {\n      fontSize: 18\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  })), \" \", \"Scan\");\n  const updateAddress = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      let address = newValue;\n\n      if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n        try {\n          const possibleAddress = await props.ensProvider.resolveName(address);\n\n          if (possibleAddress) {\n            address = possibleAddress;\n          } // eslint-disable-next-line no-empty\n\n        } catch (e) {}\n      }\n\n      setValue(address);\n\n      if (typeof props.onChange === \"function\") {\n        props.onChange(address);\n      }\n    }\n  }, [props.ensProvider, props.onChange]);\n  const scanner = scan ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      zIndex: 256,\n      position: \"absolute\",\n      left: 0,\n      top: 0,\n      width: \"100%\"\n    },\n    onClick: () => {\n      setScan(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(QrReader, {\n    delay: 250,\n    resolution: 1200,\n    onError: e => {\n      console.log(\"SCAN ERROR\", e);\n      setScan(false);\n    },\n    onScan: newValue => {\n      if (newValue) {\n        console.log(\"SCAN VALUE\", newValue);\n        let possibleNewValue = newValue;\n\n        if (possibleNewValue.indexOf(\"/\") >= 0) {\n          possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n          console.log(\"CLEANED VALUE\", possibleNewValue);\n        }\n\n        setScan(false);\n        updateAddress(possibleNewValue);\n      }\n    },\n    style: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  })) : \"\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, scanner, /*#__PURE__*/React.createElement(Input, {\n    autoFocus: props.autoFocus,\n    placeholder: props.placeholder ? props.placeholder : \"address\",\n    prefix: /*#__PURE__*/React.createElement(Blockie, {\n      address: currentValue,\n      size: 8,\n      scale: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }),\n    value: ens || currentValue,\n    addonAfter: scannerButton,\n    onChange: e => {\n      updateAddress(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/mdelgado/Documents/source/FinTech/scaffold-eth/packages/react-app/src/components/AddressInput.jsx"],"names":["React","useState","useCallback","QrReader","CameraOutlined","QrcodeOutlined","Input","Badge","useLookupAddress","Blockie","AddressInput","props","value","setValue","scan","setScan","currentValue","ens","ensProvider","scannerButton","marginTop","cursor","fontSize","updateAddress","newValue","address","indexOf","possibleAddress","resolveName","e","onChange","scanner","zIndex","position","left","top","width","console","log","possibleNewValue","substr","lastIndexOf","autoFocus","placeholder","target"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Input, Badge } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport Blockie from \"./Blockie\";\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof props.onChange === \"function\") {\n          props.onChange(address);\n        }\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}